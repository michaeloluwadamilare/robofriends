{"version":3,"sources":["Card.js","Cardlist.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","hasErorr","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAceA,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCiBOK,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIlB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCDPW,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAU,OACf,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCGCI,EAXA,SAACC,GACf,OACC,yBAAKC,MAAQ,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCiBMC,E,kDAlBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEC,UAAU,M,+BAI1B,OAAGF,KAAKJ,MAAMC,SACN,yDAEDG,KAAKX,MAAMK,a,GAhBQS,aC4CbC,E,kDAvCb,aAAe,IAAD,8BACZ,gBAYJC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAAElB,YAAauB,EAAMC,OAAOC,SAZ1C,EAAKZ,MAAQ,CACbnB,OAAQ,GACRM,YAAa,IAJC,E,gEAOK,IAAD,OAClB0B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAM3B,IAAD,EACuBb,KAAKJ,MAA5BnB,EADA,EACAA,OAAQM,EADR,EACQA,YACT+B,EAAiBrC,EAAOsC,QAAO,SAAAC,GACrC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASnC,EAAYkC,kBAErD,OAAQxC,EAAO0C,OAIf,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAgBgB,KAAKK,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAASqC,OARrB,2C,GAvBYX,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.c246dd14.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt='robots' src= {`https://robohash.org/${id}?200*200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n\t// if (true) {\r\n\t// \tthrow new Error('Nooooooo');\r\n\t// }\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t />\r\n\t\t\t\t\t) \r\n\t\t\t\t})\r\n\t\t\t}\r\n    \t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'  \r\n\t\tonChange = {searchChange} \r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={ {overflow: 'scroll', border:'5px solid black', height: '500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasErorr: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1> Oooops. that is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport Cardlist from './Cardlist';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundary from './ErrorBoundary';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n  this.state = {\n  robots: [],\n  searchfield: ''\n  }\n}\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=> response.json())\n  .then(users=> this.setState({robots: users}));\n  \n}\nonSearchChange = (event) => {\n  this.setState({ searchfield: event.target.value})\n}\n  render() {\n    const {robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot =>{\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n  })\n    return !robots.length ?\n      <h1>Loading</h1> :\n    (\n    \n    <div className='tc'>\n      <h1 className='f1'>RoboFriends</h1>\n      <SearchBox searchChange = {this.onSearchChange} />\n      <Scroll>\n      <ErrorBoundary>\n        <Cardlist robots= {filteredRobots}/>\n      </ErrorBoundary>\n      </Scroll>\n    </div>\n    );\n \n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \t<App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}